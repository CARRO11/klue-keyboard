# KLUE Keyboard API 문서

## 기본 정보

### 기본 URL
```
http://localhost:8080/api
```

### API 버전 관리
- 현재 버전: v1
- 버전은 URL에 포함: `/api/v1/...`
- 이전 버전은 최소 6개월간 지원

### 인증
- Bearer 토큰 인증 사용
- 모든 요청의 헤더에 포함 필요:
```
Authorization: Bearer {token}
```

## 공통 기능

### 페이징
모든 목록 조회 API는 페이징을 지원합니다.

**요청 파라미터**:
- `page`: 페이지 번호 (0부터 시작, 기본값: 0)
- `size`: 페이지 크기 (기본값: 20)
- `sort`: 정렬 기준 (예: `sort=id,desc`)

**예시**:
```
GET /api/v1/cases?page=0&size=10&sort=id,desc
```

**응답 형식**:
```json
{
    "content": [...],
    "totalElements": 100,
    "totalPages": 10,
    "number": 0,
    "size": 10,
    "first": true,
    "last": false
}
```

### 검색
각 엔티티별 검색 기능을 제공합니다.

**요청 파라미터**:
- `search`: 검색어
- `searchFields`: 검색할 필드들 (콤마로 구분)

**예시**:
```
GET /api/v1/cases?search=gaming&searchFields=name,description
```

### 에러 응답
모든 에러 응답은 다음 형식을 따릅니다:
```json
{
    "timestamp": "2024-05-10T12:00:00.000Z",
    "status": 400,
    "error": "Bad Request",
    "message": "상세 에러 메시지",
    "path": "/api/v1/cases"
}
```

**주요 에러 코드**:
- 400 Bad Request: 잘못된 요청
  - 유효하지 않은 필드 값
  - 필수 필드 누락
- 401 Unauthorized: 인증 실패
- 403 Forbidden: 권한 없음
- 404 Not Found: 리소스 없음
- 409 Conflict: 리소스 충돌
- 500 Internal Server Error: 서버 오류

## 1. KeyboardCase API

### 1.1 케이스 목록 조회
- **GET** `/v1/cases`
- **페이징/정렬 지원**
- **검색 지원**
  - 검색 가능 필드: name, description
- **응답**: KeyboardCase 목록
```json
{
    "content": [
        {
            "id": 1,
            "name": "Gaming Case",
            "plates": [],
            "pcbs": []
        }
    ],
    "totalElements": 100,
    "totalPages": 10,
    "number": 0,
    "size": 10,
    "first": true,
    "last": false
}
```

### 1.2 케이스 상세 조회 (연관 데이터 포함)
- **GET** `/cases/{id}/details`
- **응답**: KeyboardCase와 연관된 Plate, PCB 정보
```json
{
    "id": 1,
    "plates": [
        {
            "id": 1,
            "name": "Plate 1"
        }
    ],
    "pcbs": [
        {
            "id": 1,
            "name": "PCB 1"
        }
    ]
}
```

### 1.3 케이스 생성
- **POST** `/cases`
- **요청 본문**: KeyboardCase 객체
```json
{
    "name": "New Case"
}
```

### 1.4 케이스 수정
- **PUT** `/cases/{id}`
- **요청 본문**: KeyboardCase 객체

### 1.5 케이스 삭제
- **DELETE** `/cases/{id}`

## 2. Plate API

### 2.1 플레이트 목록 조회
- **GET** `/plates`

### 2.2 플레이트 상세 조회
- **GET** `/plates/{id}`

### 2.3 플레이트 생성
- **POST** `/plates`
- **요청 본문**:
```json
{
    "name": "New Plate",
    "keyboardCase": {
        "id": 1
    }
}
```

### 2.4 플레이트 수정
- **PUT** `/plates/{id}`

### 2.5 플레이트 삭제
- **DELETE** `/plates/{id}`

## 3. PCB API

### 3.1 PCB 목록 조회
- **GET** `/pcbs`

### 3.2 PCB 상세 조회
- **GET** `/pcbs/{id}`

### 3.3 PCB 생성
- **POST** `/pcbs`
- **요청 본문**:
```json
{
    "name": "New PCB",
    "keyboardCase": {
        "id": 1
    }
}
```

### 3.4 PCB 수정
- **PUT** `/pcbs/{id}`

### 3.5 PCB 삭제
- **DELETE** `/pcbs/{id}`

## 4. Weight API

### 4.1 무게추 목록 조회
- **GET** `/weights`

### 4.2 무게추 상세 조회
- **GET** `/weights/{id}`

### 4.3 무게추 생성
- **POST** `/weights`
- **요청 본문**:
```json
{
    "material": "Brass",
    "link": "weight_link"
}
```

### 4.4 무게추 수정
- **PUT** `/weights/{id}`

### 4.5 무게추 삭제
- **DELETE** `/weights/{id}`

## 5. Lube API

### 5.1 윤활제 목록 조회
- **GET** `/lubes`

### 5.2 윤활제 상세 조회
- **GET** `/lubes/{id}`

### 5.3 윤활제 생성
- **POST** `/lubes`
- **요청 본문**:
```json
{
    "name": "Krytox 205g0",
    "enddate": "2024-12-31T23:59:59"
}
```

### 5.4 윤활제 수정
- **PUT** `/lubes/{id}`

### 5.5 윤활제 삭제
- **DELETE** `/lubes/{id}`

## 응답 형식

### 성공 응답
- 상태 코드: 200 OK
- 생성: 200 OK (생성된 객체 반환)
- 수정: 200 OK (수정된 객체 반환)
- 삭제: 200 OK

### 실패 응답
- 404 Not Found: 요청한 리소스를 찾을 수 없음
- 400 Bad Request: 잘못된 요청
- 500 Internal Server Error: 서버 오류

## 주의사항
1. 모든 날짜/시간은 ISO 8601 형식을 사용합니다.
2. ID는 자동 생성되므로 생성 요청 시 ID를 포함하지 않습니다.
3. 연관 엔티티는 ID로 참조합니다.

## 보안 고려사항

### CORS 설정
- 허용된 오리진에서만 API 접근 가능
- 프론트엔드 개발 환경: `http://localhost:3000`
- 프로덕션 환경: `https://klue-keyboard.com`

### Rate Limiting
- IP 당 시간당 1000 요청으로 제한
- 초과 시 429 Too Many Requests 응답

### 데이터 유효성 검사
모든 입력 데이터는 다음 규칙을 따릅니다:
- 문자열 필드 최대 길이: 255자
- 날짜 형식: ISO 8601
- 숫자 필드: 범위 검증 수행

## 개발 환경 설정

### 로컬 개발 환경
1. 환경 변수 설정:
```
SPRING_PROFILES_ACTIVE=dev
DB_HOST=localhost
DB_PORT=3306
DB_NAME=klue_keyboard
DB_USERNAME=root
DB_PASSWORD=shin
```

2. CORS 설정 (개발 환경):
```
Access-Control-Allow-Origin: http://localhost:3000
Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
Access-Control-Allow-Headers: Content-Type, Authorization
```

## 모범 사례

### API 호출 예시
1. 인증 토큰 획득:
```javascript
const response = await fetch('/api/v1/auth/login', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        username: 'user',
        password: 'password'
    })
});
const { token } = await response.json();
```

2. 인증된 API 호출:
```javascript
const response = await fetch('/api/v1/cases?page=0&size=10', {
    headers: {
        'Authorization': `Bearer ${token}`
    }
});
const data = await response.json();
```

### 에러 처리
```javascript
try {
    const response = await fetch('/api/v1/cases/1');
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message);
    }
    const data = await response.json();
} catch (error) {
    console.error('API 호출 실패:', error);
}
``` 